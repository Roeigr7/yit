{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Roei\\\\Desktop\\\\\\u05DE\\u05D1\\u05D3\\u05E7_WCM\\\\test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Roei\\\\Desktop\\\\\\u05DE\\u05D1\\u05D3\\u05E7_WCM\\\\test\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Article from './components/Article/Article';\nimport Form from './components/Form/Form';\n/* A. Create a component like in a sketch folder that includes:\n            1. component with fixed height and width. Add box shadow to your component (you can see an example example2904.png)\n            2. image, with fixed height and width,  should be with zoom animation on hover\n            3. category name - with dynamic width due to the length of the text\n            4. title - with dynamic height due to the length of the text, maximum 2 rows\n            5. sub title - with dynamic height due to the length of the text, maximum 3 rows\n            6. author name - with dynamic width due to the length of the text\n\nIn the example (test-absolute.html) all divs in component are in position absolute, just so you can use the placements and sizes.\nYou need to make it more dynamic and flexible.\n\n  B.  Create div with fields for updating component:\n        1. input to edit category name\n        2. dropdown select to choose a background color of category name.\n*/\n\nexport const App = () => {\n  const _useState = useState('אוכל'),\n        _useState2 = _slicedToArray(_useState, 2),\n        catName = _useState2[0],\n        setCatName = _useState2[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(Article, {\n    catName: catName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), React.createElement(Form, {\n    catName: catName,\n    setCatName: setCatName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["C:/Users/Roei/Desktop/מבדק_WCM/test/src/App.js"],"names":["React","useState","Article","Form","App","catName","setCatName"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA;;;;;;;;;;;;;;;;AAgBA,OAAO,MAAMC,GAAG,GAAG,MAAM;AAAA,oBACOH,QAAQ,CAAC,MAAD,CADf;AAAA;AAAA,QAChBI,OADgB;AAAA,QACPC,UADO;;AAGvB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAED,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAEA,OAAf;AAAwB,IAAA,UAAU,EAAEC,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CATM","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Article from './components/Article/Article';\nimport Form from './components/Form/Form';\n/* A. Create a component like in a sketch folder that includes:\n            1. component with fixed height and width. Add box shadow to your component (you can see an example example2904.png)\n            2. image, with fixed height and width,  should be with zoom animation on hover\n            3. category name - with dynamic width due to the length of the text\n            4. title - with dynamic height due to the length of the text, maximum 2 rows\n            5. sub title - with dynamic height due to the length of the text, maximum 3 rows\n            6. author name - with dynamic width due to the length of the text\n\nIn the example (test-absolute.html) all divs in component are in position absolute, just so you can use the placements and sizes.\nYou need to make it more dynamic and flexible.\n\n  B.  Create div with fields for updating component:\n        1. input to edit category name\n        2. dropdown select to choose a background color of category name.\n*/\n\nexport const App = () => {\n  const [catName, setCatName] = useState('אוכל');\n\n  return (\n    <div>\n      <Article catName={catName} />\n      <Form catName={catName} setCatName={setCatName} />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}